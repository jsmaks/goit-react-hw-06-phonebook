{"version":3,"sources":["redux/phonebook/phonebook-actions.js","components/FormContacts/Form.js","components/Contacts/ContactsList.jsx","components/Filter/Filter.jsx","components/Container/Container.js","pages/Phonebook.js","App.js","redux/phonebook/phonebook-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","Form","state","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","checkOnDuplicate","props","libraryContacts","reset","list","nameLowerCase","toLowerCase","find","alert","this","onSubmit","type","pattern","title","required","onChange","className","Component","connect","contacts","items","dispatch","data","contactActions","getVisibleContacts","allContacts","filter","normalizedFilter","toLocaleLowerCase","includes","onDelete","map","el","onClick","event","Container","children","Phonebook","App","createReducer","actions","filterReducer","_state","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","phonebookReducer","devToold","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.37b01313.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {createAction} from '@reduxjs/toolkit'\r\n\r\nconst addContact = createAction('contacts/Add', ({ name, number })=> {\r\n  return {\r\n    payload: {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    },\r\n  }\r\n} )\r\n\r\nconst deleteContact = createAction('contacts/Delete')\r\nconst changeFilter = createAction('contacts/changeFilter')\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n//-----------------------------------------------------------\r\n// const changeFilter = (value) => ({\r\n//   type: types.CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n// const deleteContact = (contactId) => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name: name,\r\n//     number: number,\r\n//   },\r\n// });","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport contactActions from \"../../redux/phonebook/phonebook-actions\";\r\nimport \"./Form.css\";\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.checkOnDuplicate(this.props.libraryContacts);\r\n    this.reset();\r\n  };\r\n  checkOnDuplicate = (list) => {\r\n    const nameLowerCase = this.state.name.toLowerCase();\r\n\r\n    list.find(({ name }) => name.toLowerCase() === nameLowerCase)\r\n      ? alert(`${this.state.name} is alredy in contacts`)\r\n      : this.props.addContact(this.state);\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button className=\"btn\" type=\"submit\">\r\n          Добавить\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  state: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n  }),\r\n\r\n  handleChange: PropTypes.func,\r\n  handleSubmit: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  libraryContacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addContact: (data) => dispatch(contactActions.addContact(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import \"./Contacts.css\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactActions from \"../../redux/phonebook/phonebook-actions\";\r\n\r\nconst Contacts = ({ libraryContacts, onDelete }) => {\r\n  return (\r\n    <div>\r\n      <ul className=\"contacts__list\">\r\n        {libraryContacts.map((el) => (\r\n          <li className=\"contacts__item\" key={el.id}>\r\n            <p className=\"contact__name\">\r\n              {el.name}:<span className=\"contact__tel\">{el.number}</span>\r\n            </p>\r\n            <button className=\"btn btn-delete\" onClick={() => onDelete(el.id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nContacts.propTypes = {\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  libraryContacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDisptachToProps = (dispatch) => ({\r\n  onDelete: (id) => dispatch(contactActions.deleteContact(id)),\r\n});\r\nexport default connect(mapStateToProps, mapDisptachToProps)(Contacts);\r\n//--------------------------------------------------------------------\r\n// const mapStateToProps = (state) => {\r\n//   const { filter, items } = state.contacts;\r\n\r\n//   const visibleContacts = getVisibleContacts(items, filter);\r\n\r\n//   return {\r\n//     libraryContacts: visibleContacts,\r\n//   };\r\n// };\r\n","import { connect } from \"react-redux\";\r\nimport contactActions from \"../../redux/phonebook/phonebook-actions\";\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (event) =>\r\n    dispatch(contactActions.changeFilter(event.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\n\r\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\r\n\r\nexport default Container;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Form from \"../components/FormContacts/Form\";\r\nimport Contacts from \"../components/Contacts/ContactsList\";\r\nimport Filter from \"../components/Filter/Filter\";\r\nimport Container from \"../components/Container/Container\";\r\n\r\nclass Phonebook extends Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Phonebook</h1>\r\n        <Form />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <Contacts />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Phonebook;\r\n","import React from \"react\";\r\nimport Phonebook from \"./pages/Phonebook\";\r\n\r\nconst App = () => (\r\n<>\r\n<Phonebook />;\r\n</>\r\n);\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./phonebook-actions\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [actions.changeFilter]: (_state, action) => action.payload,\r\n});\r\n//\r\nexport default combineReducers({\r\n  items: items,\r\n  filter: filterReducer,\r\n});\r\n//------------------------------------------------------------------------\r\n// [actions.addContact]: (state, { payload }) =>\r\n//   state.find(({ name }) => name.toLowerCase() === payload.name.toLowerCase())\r\n//     ? alert(`${payload.name} is alredy in contacts`) && state\r\n//     : [...state, payload],\r\n//------------------------------------------------------------------------\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   if (type === actionTypes.ADD) {\r\n//     const checkOnDuplicate = state.find(\r\n//       ({ name }) => name.toLowerCase() === payload.name.toLowerCase()\r\n//     );\r\n//     if (checkOnDuplicate) {\r\n//       alert(`${payload.name} is alredy in contacts`);\r\n//       return state;\r\n//     }\r\n//     return [...state, payload];\r\n//   }\r\n//   switch (type) {\r\n//     // case actionTypes.ADD:\r\n//     //   return [...state, payload];\r\n\r\n//     case actionTypes.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// const filterReducer = (state = \"\", { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'contacts/changeFilter':\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport phonebookReducer from \"./phonebook/phonebook-reducer\";\r\nimport logger from \"redux-logger\";\r\n\r\n//-----------------------------------------------------------------\r\n//-----------Для локал стореджа, прослойку добавляем. костыль убираем ошибки------------//\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n//---------------------------------------------------------------\r\n\r\n//-----Добавляем ключ локал сторедж----\r\nconst persistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n//-------------------------------------\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistConfig, phonebookReducer),\r\n  },\r\n  middleware: middleware,\r\n  devToold: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}